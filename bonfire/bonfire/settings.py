"""
Django settings for bonfire project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import logging
import os
import sys
from datetime import timedelta

import sentry_sdk
from firebase_admin import initialize_app
from pytz import timezone
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False if not os.getenv("DEBUG") == "True" else True

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
DOMAIN_NAME = os.getenv("DOMAIN_NAME", "localhost:8000")

# Security settings
CSRF_COOKIE_SECURE = os.getenv("ENV") != "LOCAL"
SESSION_COOKIE_SECURE = os.getenv("ENV") != "LOCAL"
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True


# Application definition

INSTALLED_APPS = [
    # Django
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    # Third party
    "corsheaders",
    "django_extensions",
    "django_otp",
    "django_otp.plugins.otp_totp",
    "django_otp.plugins.otp_static",
    "drf_spectacular",
    "rest_framework_simplejwt.token_blacklist",
    "spec.apps.FcmDjangoConfig",
    # First party
    "bonfire.apps.OTPAdminConfig",
    "doors",
    "massages",
    "slack",
    "users",
    "versions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "bonfire.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "bonfire.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.getenv("DB_NAME", "bonfire"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST", "postgres-bonfire"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "users.User"
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"
TZ = timezone("Europe/Stockholm")

USE_I18N = True

USE_L10N = True

USE_TZ = True

FORCE_SCRIPT_NAME = os.getenv("FORCE_SCRIPT_NAME")


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_ROOT = os.getenv("STATIC_ROOT", "/var/www/static/")
STATIC_URL = "/api-static/"
STATICFILES_STORAGE = os.getenv(
    "STATICFILES_STORAGE", "whitenoise.storage.CompressedManifestStaticFilesStorage"
)
MEDIA_ROOT = os.getenv("MEDIA_ROOT", "/var/www/media/")
MEDIA_URL = os.getenv("MEDIA_URL", "/media/")
DEFAULT_FILE_STORAGE = os.getenv(
    "DEFAULT_FILE_STORAGE", "django.core.files.storage.FileSystemStorage"
)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("REDIS_URL", "redis://redis:6379/2"),
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    }
}


SPECTACULAR_SETTINGS = {
    "TITLE": "bonfire",
    "DESCRIPTION": "bonfire",
    "VERSION": "1.0.0",
    "SCHEMA_PATH_PREFIX_INSERT": "/api",
    # permissions
    "SERVE_PERMISSIONS": ["rest_framework.permissions.IsAdminUser"],
    "AUTHENTICATION_WHITELIST": ["rest_framework.authentication.SessionAuthentication"],
}


# CORS settings
CORS_ORIGIN_ALLOW_ALL = DEBUG
CORS_ALLOWED_ORIGINS = list(
    filter(None, os.getenv("CORS_ALLOWED_ORIGINS", "").split(","))
)

# FCM
FIREBASE_APP = initialize_app()
FCM_DJANGO_SETTINGS = {
    # default: _('FCM Django')
    "APP_VERBOSE_NAME": "FCM Django",
    # true if you want to have only one active device per registered user at a time
    # default: False
    "ONE_DEVICE_PER_USER": False,
    # devices to which notifications cannot be sent,
    # are deleted upon receiving error response from FCM
    # default: False
    "DELETE_INACTIVE_DEVICES": True,
    # Transform create of an existing Device (based on registration id) into
    # an update. See the section
    # "Update of device with duplicate registration ID" for more details.
    "UPDATE_ON_DUPLICATE_REG_ID": True,
}

# AWS
AWS_ACCESS_KEY_ID = os.getenv("AWS_S3_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_S3_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_REGION")
AWS_S3_BUCKET_NAME = os.getenv("AWS_S3_BUCKET_NAME")

# Flex
FLEX_API_URL = os.getenv("FLEX_API_URL")
FLEX_API_USER = os.getenv("FLEX_API_USER")
FLEX_API_PASSWORD = os.getenv("FLEX_API_PASSWORD")

# Google
GOOGLE_APPLICATION_CREDENTIALS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
GOOGLE_WHITELIST_DOMAIN = os.getenv("GOOGLE_WHITELIST_DOMAIN")

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_RENDERER_CLASSES": (  # Note that the browsable API is disabled
        "rest_framework.renderers.JSONRenderer",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


# JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(os.getenv("ACCESS_TOKEN_LIFETIME_MINUTES", 60 * 24))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        minutes=int(os.getenv("REFRESH_TOKEN_LIFETIME_MINUTES", 60 * 24 * 90))
    ),
}

# 2FA
OTP_TOTP_ISSUER = f"bonfire {os.getenv('ENV')}"

# Slack
SLACK_TOKEN = os.getenv("SLACK_TOKEN")
SLACK_WORKING_LOCATION_CHANNEL = os.getenv("SLACK_WORKING_LOCATION_CHANNEL")

# Sentry
sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"),
    integrations=[DjangoIntegration()],
    traces_sample_rate=0,
    environment=os.getenv("ENV"),
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
)

if DEBUG:
    TESTING = len(sys.argv) > 1 and sys.argv[1] == "test"
    if TESTING:
        # Disable log in tests
        logging.disable(logging.WARN)
    # If you want logs, comment above and enable below
    # logging.basicConfig(
    #     level=logging.INFO,
    #     format=" %(levelname)s %(name)s: %(message)s",
    # )

    # Enable django debug toolbar
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append(
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    )
    DEBUG_TOOLBAR_CONFIG = {"SHOW_TOOLBAR_CALLBACK": lambda _request: DEBUG}

    # Disable 2FA
    INSTALLED_APPS.remove("bonfire.apps.OTPAdminConfig")
    INSTALLED_APPS.append("django.contrib.admin")

    # Enable browsable API
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] = (
        "rest_framework.renderers.JSONRenderer",
        "utils.renderers.CustomBrowsableAPIRenderer",
    )

    # API is not mounted as a sub-resource locally
    SPECTACULAR_SETTINGS["SCHEMA_PATH_PREFIX_INSERT"] = ""

    # Skip running Celery worker locally
    CELERY_TASK_ALWAYS_EAGER = (
        False if not os.getenv("CELERY_TASK_ALWAYS_EAGER") == "True" else True
    )
